{
  "ClientPath": {
    "prefix": ["paths-client", "pc"],
    "body": [
      "local Players = game:GetService(\"Players\")",
      "local Paths = require(Players.LocalPlayer.PlayerScripts.Paths)"
    ]
  },
  "ServerPath": {
    "prefix": ["paths-server", "ps"],
    "body": [
      "local ServerScriptService = game:GetService(\"ServerScriptService\")",
      "local Paths = require(ServerScriptService.Paths)"
    ]
  },
  "Util": {
    "prefix": ["util"],
    "body": "local ${1:SomeUtil} = require(Paths.Shared.Utils.${1:SomeUtil})"
  },
  "Shared": {
    "prefix": ["shared"],
    "body": "local ${2:SomeShared} = require(Paths.Shared.${1:Directory}${2:SomeShared})"
  },
  "Server": {
    "prefix": ["server"],
    "body": "local ${2:SomeServer} = require(Paths.Server.${1:Directory}${2:SomeServer})"
  },
  "Client": {
    "prefix": ["client"],
    "body": "local ${2:SomeClient} = require(Paths.Server.${1:Directory}${2:SomeClient})"
  },
  "Module": {
    "prefix": ["module"],
    "body": [
      "local ${0:$TM_FILENAME_BASE} = {}",
      "",
      "return ${0:$TM_FILENAME_BASE}"
    ]
  },
  "ServerModule": {
    "prefix": ["module-server"],
    "body": [
      "local ${0:$TM_FILENAME_BASE} = {}",
      "",
      "local ServerScriptService = game:GetService(\"ServerScriptService\")",
      "local Paths = require(ServerScriptService.Paths)",
      "",
      "return ${0:$TM_FILENAME_BASE}"
    ]
  },
  "ClientModule": {
    "prefix": ["module-client"],
    "body": [
      "local ${0:$TM_FILENAME_BASE} = {}",
      "",
      "local Players = game:GetService(\"Players\")",
      "local Paths = require(Players.LocalPlayer.PlayerScripts.Paths)",
      "",
      "return ${0:$TM_FILENAME_BASE}"
    ]
  },
  "LocalPlayer": {
    "prefix": ["localplayer"],
    "body": ["local player = Players.LocalPlayer"]
  },
  "CommentBlock": {
    "prefix": ["cb"],
    "description": "Comment a section of code",
    "body": [
      "-------------------------------------------------------------------------------",
      "-- ${0:COMMENT}",
      "-------------------------------------------------------------------------------"
    ]
  },
  "module-function":{
    "prefix": ["module-function"],
		"body": [
			"function ${0:$TM_FILENAME_BASE}.${1:someFunction}(${2:})",
			"",
			"end",
		],
  },
  "Class": {
    "prefix": "class-closure",
    "body": [
      "function ${0:$TM_FILENAME_BASE}.new()\r",
      "    local ${1:class} = {}\r",
      "\r",
      "    -------------------------------------------------------------------------------\r",
      "    -- Private Members\r",
      "    -------------------------------------------------------------------------------\r",
      "\r",
      "    --todo\r",
      "\r",
      "    -------------------------------------------------------------------------------\r",
      "    -- Public Members\r",
      "    -------------------------------------------------------------------------------\r",
      "\r",
      "    --todo\r",
      "\r",
      "    -------------------------------------------------------------------------------\r",
      "    -- Private Methods\r",
      "    -------------------------------------------------------------------------------\r",
      "\r",
      "    --todo\r",
      "\r",
      "    -------------------------------------------------------------------------------\r",
      "    -- Public Methods\r",
      "    -------------------------------------------------------------------------------\r",
      "\r",
      "    --todo\r",
      "\r",
      "    -------------------------------------------------------------------------------\r",
      "    -- Logic\r",
      "    -------------------------------------------------------------------------------\r",
      "\r",
      "    --todo\r",
      "\r",
      "    return ${1:class}\r",
      "end"
    ],
    "description": "Class Template (Closure)"
  },
  "KeyValuePair": {
    "prefix": ["key-value-pair", "kvp"],
    "body": [
      "${1:key} = \"${1:value}\""
    ],
    "description": "Equal Key-Value Pair"
  },
  "RegisterUIState": {
    "prefix": ["register-ui-state"],
    "body": [
      "    UIController.registerStateScreenCallbacks(UIConstants.States${1:}, {\r",
      "        Boot = ${0:$TM_FILENAME_BASE}.boot,\r",
      "        Shutdown = ${0:$TM_FILENAME_BASE}.shutdown,\r",
      "        Maximize = ${0:$TM_FILENAME_BASE}.maximize,\r",
      "        Minimize = ${0:$TM_FILENAME_BASE}.minimize,\r",
      "    })"
    ],
    "description": "Register UI State layout"
  },
  "Test": {
    "prefix": ["test"],
    "body": [
      "local ReplicatedStorage = game:GetService(\"ReplicatedStorage\")\r",
      "local TestUtil = require(ReplicatedStorage.Shared.Utils.TestUtil)\r",
      "\r",
      "return function()\r",
      "    local issues: { string } = {}\r",
      "\r",
      "    return issues\r",
      "end\r",
      ""
  ],
    "description": ".spec file layout"
  }
}
